<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
List<AssetEntryResult> assetEntryResults = assetPublisherHelper.getAssetEntryResults(searchContainer, assetPublisherDisplayContext.getAssetEntryQuery(), assetPublisherDisplayContext.getLayout(), portletPreferences, assetPublisherDisplayContext.getPortletName(), assetPublisherDisplayContext.getLocale(), assetPublisherDisplayContext.getTimeZone(), assetPublisherDisplayContext.getCompanyId(), assetPublisherDisplayContext.getScopeGroupId(), assetPublisherDisplayContext.getUserId(), assetPublisherDisplayContext.getClassNameIds(), null);

for (AssetEntryResult assetEntryResult : assetEntryResults) {
	List<AssetEntry> assetEntries = assetEntryResult.getAssetEntries();
%>

	<c:if test="<%= Validator.isNotNull(assetEntryResult.getTitle()) %>">
		<h3 class="asset-entries-group-label"><%= HtmlUtil.escape(assetEntryResult.getTitle()) %></h3>
	</c:if>

	<liferay-ddm:template-renderer
		className="<%= AssetEntry.class.getName() %>"
		displayStyle="<%= assetPublisherDisplayContext.getDisplayStyle() %>"
		displayStyleGroupId="<%= assetPublisherDisplayContext.getDisplayStyleGroupId() %>"
		entries="<%= assetEntries %>"
	>

		<%
		request.setAttribute("view.jsp-results", assetEntries);

		for (int assetEntryIndex = 0; assetEntryIndex < assetEntries.size(); assetEntryIndex++) {
			AssetEntry assetEntry = assetEntries.get(assetEntryIndex);

			long classPK = assetEntry.getClassPK();

			AssetRendererFactory<?> assetRendererFactory = AssetRendererFactoryRegistryUtil.getAssetRendererFactoryByClassNameId(assetEntry.getClassNameId());

			if (assetRendererFactory == null) {
				continue;
			}

			AssetRenderer<?> assetRenderer = null;

			try {
				assetRenderer = assetRendererFactory.getAssetRenderer(classPK);
			}
			catch (Exception e) {
				if (_log.isWarnEnabled()) {
					_log.warn(e, e);
				}
			}

			if ((assetRenderer == null) || !assetRenderer.isDisplayable()) {
				continue;
			}

			request.setAttribute("view.jsp-assetEntry", assetEntry);
			request.setAttribute("view.jsp-assetEntryIndex", Integer.valueOf(assetEntryIndex));
			request.setAttribute("view.jsp-assetRenderer", assetRenderer);
			request.setAttribute("view.jsp-assetRendererFactory", assetRendererFactory);
			request.setAttribute("view.jsp-print", Boolean.FALSE);
			request.setAttribute("view.jsp-title", assetRenderer.getTitle(locale));

			try {
				if (StringUtil.startsWith(assetPublisherDisplayContext.getDisplayStyle(), PortletDisplayTemplateManager.DISPLAY_STYLE_PREFIX)) {
					assetPublisherDisplayContext.setDisplayStyle(assetPublisherDisplayContext.getDefaultDisplayStyle());
				}

				if (!ArrayUtil.contains(assetPublisherDisplayContext.getDisplayStyles(), assetPublisherDisplayContext.getDisplayStyle())) {
		%>

					<%= HtmlUtil.escape(LanguageUtil.format(request, "x-is-not-a-display-type", assetPublisherDisplayContext.getDisplayStyle())) %>

				<%
				}
				else {
					for (String curDisplayStyle : assetPublisherDisplayContext.getDisplayStyles()) {
						if (assetPublisherDisplayContext.getDisplayStyle().equals(curDisplayStyle)) {
							String displayStyleJsp = "/display/" + TextFormatter.format(curDisplayStyle, TextFormatter.N) + ".jsp";
				%>

							<liferay-util:include page="<%= displayStyleJsp %>" servletContext="<%= application %>" />

		<%
							break;
						}
					}
				}
			}
			catch (Exception e) {
				_log.error(e.getMessage());
			}
		}
		%>

	</liferay-ddm:template-renderer>

<%
}
%>

<c:if test="<%= assetEntryResults.isEmpty() %>">
	<liferay-ddm:template-renderer
		className="<%= AssetEntry.class.getName() %>"
		displayStyle="<%= assetPublisherDisplayContext.getDisplayStyle() %>"
		displayStyleGroupId="<%= assetPublisherDisplayContext.getDisplayStyleGroupId() %>"
		entries="<%= new ArrayList<AssetEntry>() %>"
	>

		<%
		Map<Long, List<AssetPublisherAddItemHolder>> scopeAssetPublisherAddItemHolders = assetPublisherDisplayContext.getScopeAssetPublisherAddItemHolders(1);
		%>

		<c:if test="<%= MapUtil.isEmpty(scopeAssetPublisherAddItemHolders) && !((assetCategoryId > 0) || Validator.isNotNull(assetTagName)) %>">

			<%
			renderRequest.setAttribute(WebKeys.PORTLET_CONFIGURATOR_VISIBILITY, Boolean.TRUE);
			%>

		</c:if>

		<div class="alert alert-info">
			<c:choose>
				<c:when test="<%= !portletName.equals(AssetPublisherPortletKeys.RELATED_ASSETS) %>">
					<liferay-ui:message key="there-are-no-results" />
				</c:when>
				<c:otherwise>
					<liferay-ui:message key="there-are-no-related-assets" />
				</c:otherwise>
			</c:choose>
		</div>
	</liferay-ddm:template-renderer>
</c:if>