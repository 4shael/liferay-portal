{namespace com.liferay.layout.admin.web.FloatingToolbarSpacingPanel}

/**
 * FloatingToolbarSpacingPanel
 */
{template .render}
	{@param item: ?}
	{@param? _containerTypes: ?}
	{@param? _handleContainerTypeOptionChange: any}
	{@param? _handleColumnSpacingOptionChange: any}

	<div class="floating-toolbar-spacing-panel">
		<div class="form-group">
			{call .containerTypeOptions}
				{param containerTypes: $_containerTypes /}
				{param handleContainerTypeOptionChange: $_handleContainerTypeOptionChange /}
				{param item: $item /}
			{/call}
		</div>

		<div class="form-group">
			{call .columnSpacingOptions}
				{param handleColumnSpacingOptionChange: $_handleColumnSpacingOptionChange /}
				{param item: $item /}
			{/call}
		</div>
	</div>
{/template}

/**
 * Column spacing options
 */
{template .columnSpacingOptions}
	{@param item: [
		config: [
			columnSpacing: bool
		]
	]}
	{@param? handleColumnSpacingOptionChange: any}

	{let $spacingCheckboxLabel kind="text"}
		{msg desc=""}space-between-columns{/msg}
	{/let}

	{call ClayCheckbox.render}
		{param checked: ($item.config and $item.config.columnSpacing) ?: true /}
		{param events: [
			'change': $handleColumnSpacingOptionChange
		] /}
		{param label: $spacingCheckboxLabel /}
	{/call}
{/template}

/**
 * Container type options
 */
{template .containerTypeOptions}
	{@param item: [
		config: [
			containerType: string
		]
	]}
	{@param? containerTypes: list<[
		containerTypeId: string,
		label: string
	]>}
	{@param? handleContainerTypeOptionChange: any}

	{if $containerTypes}
		<label for="floatingToolbarSpacingPanelContainer">
			{msg desc=""}container{/msg}
		</label>

		<select
			class="form-control form-control-sm"
			data-onchange="{$handleContainerTypeOptionChange}"
			id="floatingToolbarSpacingPanelContainer"
		>
			{foreach $containerType in $containerTypes}
				{call .containerTypeOption}
					{param containerType: $containerType /}
					{param item: $item /}
					{param key: $containerType.containerTypeId /}
				{/call}
			{/foreach}
		</select>
	{/if}
{/template}

/**
 * Container type option
 */
{template .containerTypeOption}
	{@param containerType: [
		containerTypeId: string,
		label: string
	]}
	{@param item: [
		config: [
			containerType: string
		]
	]}

	{let $optionAttributes kind="attributes"}
		value="{$containerType.containerTypeId}"

		{if $item.config and $item.config.containerType == $containerType.containerTypeId}
			selected
		{/if}
	{/let}

	<option {$optionAttributes}>
		{$containerType.label}
	</option>
{/template}